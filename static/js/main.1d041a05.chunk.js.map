{"version":3,"sources":["components/GameOver.js","components/CardElement.js","components/GameBoard.js","game/game.js","MemoryGame.js","reportWebVitals.js","index.js"],"names":["GameOver","props","show","id","onClick","handleRestart","CardElement","card","className","flipped","handleFlip","src","icon","alt","GameBoard","cards","map","index","game","lockMode","firstCard","secondCard","techs","setCard","this","filter","console","log","checkMatch","clearCards","unflipCards","checkGameOver","length","createCardsFromTechs","forEach","tech","push","createPairFromTech","flatMap","pair","shuffleCards","createIdWithTech","parseInt","Math","random","currentIndex","randomIndex","floor","flipCard","cardId","gameOverCallback","noMatchCallback","setTimeout","MemoryGame","useState","gameOver","setGameOver","setCards","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d041a05.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\n\r\nexport default function GameOver(props) {\r\n    return props.show ? (\r\n        <div id=\"gameOver\">\r\n            <div>Congratulations, you finished the game!</div>\r\n            <button id=\"restart\" onClick={props.handleRestart}>Play again</button>\r\n        </div>\r\n    ) : (\r\n        <Fragment />\r\n    );\r\n}","import React from 'react';\r\n\r\nexport default function CardElement(props) {\r\n    return (\r\n        <div id={props.card.id} className={`card ${props.card.flipped ? 'flip' : ''}`} onClick={() => props.handleFlip(props.card)}>\r\n            <div className=\"card_front\">\r\n                <img className=\"icon\" src={`assets/images/${props.card.icon}.png`} alt={props.card.icon} />\r\n            </div>\r\n            <div className=\"card_back\">\r\n                {\"</>\"}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport CardElement from './CardElement'\r\n\r\nexport default function GameBoard(props) {\r\n    return (\r\n        <div id=\"gameBoard\">\r\n            {props.cards.map((card, index) => \r\n                <CardElement handleFlip={props.handleFlip} key={index} card={card}></CardElement>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","let game = {\n    lockMode: false,\n    firstCard: null,\n    secondCard: null,\n\n    techs: [\n        \"bootstrap\",\n        \"css\",\n        \"electron\",\n        \"firebase\",\n        \"html\",\n        \"javascript\",\n        \"jquery\",\n        \"mongo\",\n        \"node\",\n        \"react\",\n    ],\n\n    cards: null,\n\n    setCard: function (id) {\n        let card = this.cards.filter(card => card.id === id)[0];\n        console.log(card);\n        if (card.flipped || this.lockMode) {\n            return false;\n        }\n\n        if (!this.firstCard) {\n            this.firstCard = card;\n            this.firstCard.flipped = true;\n            return true;\n        } else {\n            this.secondCard = card;\n            this.secondCard.flipped = true;\n            this.lockMode = true;\n            return true;\n        }\n    },\n\n    checkMatch: function () {\n        if (!this.firstCard || !this.secondCard) {\n            return false;\n        }\n        return this.firstCard.icon === this.secondCard.icon;\n    },\n\n    clearCards: function () {\n        this.firstCard = null;\n        this.secondCard = null;\n        this.lockMode = false;\n    },\n    unflipCards() {\n        this.firstCard.flipped = false;\n        this.secondCard.flipped = false;\n        this.clearCards();\n    },\n\n    checkGameOver() {\n        return this.cards.filter(card => !card.flipped).length === 0;\n    },\n\n    createCardsFromTechs: function () {\n        this.cards = [];\n\n        this.techs.forEach(tech => {\n            this.cards.push(this.createPairFromTech(tech));\n        });\n        this.cards = this.cards.flatMap(pair => pair);\n        this.shuffleCards();\n        return this.cards;\n    },\n\n    createPairFromTech: function (tech) {\n        return [\n            {\n                id: this.createIdWithTech(tech),\n                icon: tech,\n                flipped: false,\n            },\n            {\n                id: this.createIdWithTech(tech),\n                icon: tech,\n                flipped: false,\n            },\n        ];\n    },\n\n    createIdWithTech: function (tech) {\n        return tech + parseInt(Math.random() * 1000);\n    },\n\n    shuffleCards: function (cards) {\n        let currentIndex = this.cards.length;\n        let randomIndex = 0;\n\n        while (currentIndex !== 0) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            [this.cards[randomIndex], this.cards[currentIndex]] = [\n                this.cards[currentIndex],\n                this.cards[randomIndex],\n            ];\n        }\n    },\n\n    flipCard: function(cardId, gameOverCallback, noMatchCallback) {\n        if (this.setCard(cardId)) {\n            if (this.secondCard) {\n                if (this.checkMatch()) {\n                    this.clearCards();\n                    if (this.checkGameOver()) {\n                        gameOverCallback();\n                    }\n                } else {\n                    setTimeout(() => {\n                        this.unflipCards();\n                        noMatchCallback();\n                    }, 1000);\n                };\n            }\n        }\n    },\n};\n\n\nexport default game;","import React, { useState, useEffect } from 'react';\r\nimport GameOver from './components/GameOver';\r\nimport GameBoard from './components/GameBoard';\r\nimport game from './game/game';\r\n\r\nexport default function MemoryGame() {\r\n\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [cards, setCards] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setCards(game.createCardsFromTechs());\r\n    }, [])\r\n\r\n    function restart() {\r\n\r\n        game.clearCards();\r\n        setCards(game.createCardsFromTechs());\r\n        setGameOver(false);\r\n\r\n    }\r\n    \r\n    function handleFlip(card) {\r\n\r\n        game.flipCard(card.id, () => {\r\n            setGameOver(true); \r\n        }, () => {\r\n            setCards([...game.cards]);\r\n        })\r\n\r\n        setCards([...game.cards]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <GameBoard handleFlip={handleFlip} cards={cards}></GameBoard>\r\n            <GameOver show={gameOver} handleRestart={restart}></GameOver>\r\n        </div>\r\n    )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MemoryGame from './MemoryGame';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MemoryGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}